# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

cmake_minimum_required(VERSION 3.4)

include(ExternalProject)
include(CMakeParseArguments)

# Avoid duplication of thirdparty worktrees
set(THECORE_BUILD_THIRDPARTY_DIR "${CMAKE_CURRENT_BINARY_DIR}/thirdparty_worktree")

# Stores suite records for use in external tooling.
# Format:
#   suite_name,target_name,bin_path,elf_path
#
# Each new suite starts with new line.
set(SUITE_LIST_FILE ${CMAKE_CURRENT_BINARY_DIR}/suite_list.txt)

# Variable holding suites for suite files
set(SUITE_LIST "")

# theCore directory and its API. Used mainly for nice printing in this module.
set(CORE_DIR ${CMAKE_CURRENT_LIST_DIR}/../)
include(${CORE_DIR}/build_api.cmake)

# Adds theCore test suite and sets suite parameters.
#
# Syntax:
# add_suite(test_name
#          CASES case [cases ...]
#          TARGET_NAME target_name
#          [TOOLCHAIN_NAME toolchain_name])
function(add_suite suite_name)

    cmake_parse_arguments(TEST
            ""
            "TOOLCHAIN_NAME;TARGET_NAME"
            "CASES"
            ${ARGN})

    # The same suite can be tested against different toolchains.
    # Proper suffix must be added to the suite name.

    if(DEFINED TEST_TOOLCHAIN_NAME)
        if(TEST_TOOLCHAIN_NAME MATCHES "gnu")
            set(SUITE_SUFFIX ".gnu")
        elseif(TEST_TOOLCHAIN_NAME MATCHES "clang")
            set(SUITE_SUFFIX ".clang")
        else()
            # Must be filled if assertion hit.
            msg_fatal("Toolchain: ${TEST_TOOLCHAIN_NAME} not recognized")
        endif()
    endif()

    # Often used paths

    set(MCUS_DIR ${CMAKE_CURRENT_LIST_DIR}/mcus)
    set(TARGETS_DIR ${CMAKE_CURRENT_LIST_DIR}/targets)
    set(TESTCASES_DIR ${CMAKE_CURRENT_LIST_DIR}/cases)
    set(SUITE_SOURCE_DIR ${TARGETS_DIR}/${TEST_TARGET_NAME}/suites/${suite_name})

    # Autogenerated test runners directory
    set(AUTOGEN_DIR ${CMAKE_CURRENT_BINARY_DIR}/${TEST_TARGET_NAME}/${suite_name}${SUITE_SUFFIX}/)
    file(MAKE_DIRECTORY ${AUTOGEN_DIR})

    set(TOOLCHAINS_DIR ${CORE_DIR}/toolchains)

    # Collect test cases sources

    set(TEST_SOURCES)

    foreach(case ${TEST_CASES})
        set(CASE_SOURCES)
        include(${TESTCASES_DIR}/${case}/case_defs.cmake)
        list(APPEND TEST_SOURCES ${CASE_SOURCES})
    endforeach()

    if(GENTEST_RESULT)
        msg_fatal("Unable to generate test runners: ${GENSUITE_RESULT}")
    endif()

    # Arguments for the test project
    set(CMAKE_ARGS)

    # Partially optional arguments

    if(DEFINED TEST_TOOLCHAIN_NAME)
        list(APPEND CMAKE_ARGS -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAINS_DIR}/${TEST_TOOLCHAIN_NAME})
    endif()

    list(APPEND CMAKE_ARGS -DCORE_DIR=${CORE_DIR})
    list(APPEND CMAKE_ARGS -DTESTCASES_DIR=${TESTCASES_DIR})
    list(APPEND CMAKE_ARGS -DMCUS_DIR=${MCUS_DIR})
    list(APPEND CMAKE_ARGS -DAUTOGEN_DIR=${AUTOGEN_DIR})
    list(APPEND CMAKE_ARGS -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})
    list(APPEND CMAKE_ARGS -DTHECORE_BUILD_THIRDPARTY_DIR=${THECORE_BUILD_THIRDPARTY_DIR})

    set(COMPLETE_TEST_NAME "${suite_name}_${TEST_TARGET_NAME}${SUITE_SUFFIX}")

    msg_info("-----------------------------------------------")
    msg_info("   Suite added:   ${COMPLETE_TEST_NAME}")
    msg_info("   Suite dir:     ${SUITE_SOURCE_DIR}")
    msg_info("   Target:        ${TEST_TARGET_NAME}")
    msg_info("-----------------------------------------------\n")

    # Records suite for external tooling.

    if(NOT TEST_TARGET_NAME STREQUAL host)
        set(SUITE_LIST "${SUITE_LIST}${suite_name}.${SUITE_SUFFIX},")
        set(SUITE_LIST "${SUITE_LIST}${TEST_TARGET_NAME},")
        set(SUITE_LIST "${SUITE_LIST}${AUTOGEN_DIR}/build/${suite_name},")
        set(SUITE_LIST "${SUITE_LIST}${AUTOGEN_DIR}/build/${suite_name}.bin\n" PARENT_SCOPE)
    endif()

    externalproject_add(${COMPLETE_TEST_NAME}
            SOURCE_DIR ${SUITE_SOURCE_DIR}
            BINARY_DIR ${AUTOGEN_DIR}/build/
            BUILD_ALWAYS 1
            INSTALL_COMMAND echo 'Install not needed, step skipped'
            CMAKE_ARGS ${CMAKE_ARGS}
            )

    # Generate test runners

    # When invoking script, source file names must be separated with space.
    string(REPLACE ";" " " TEST_SOURCES_SPACED "${TEST_SOURCES}")

    externalproject_add_step(${COMPLETE_TEST_NAME} gen_test_runner
            COMMAND bash "-c"
                        "${CORE_DIR}/scripts/gen_suite.py \
                        -s ${suite_name} -i ${TEST_SOURCES_SPACED} \
                        -o ${AUTOGEN_DIR}/main.cpp \
                        -m ${AUTOGEN_DIR}/suite_tests.cmake"
            ALWAYS 1
            DEPENDS ${TEST_SOURCES}
            COMMENT "Generating test runners...")

endfunction()


#-------------------------------------------------------------------------------
# Platform BAT suite

add_suite(platform_bat
        CASES               gpio_bat exti_manager_bat bypass_console_bat uart_bat
                            systmr_bat delay_bat
        TOOLCHAIN_NAME      arm-cm4-gnu.cmake
        TARGET_NAME         tivac_tm4)

# GNU suite
add_suite(platform_bat
        CASES               systmr_bat uart_bat gpio_bat exti_manager_bat
                            bypass_console_bat adc_bat delay_bat
        TOOLCHAIN_NAME      arm-cm4-gnu.cmake
        TARGET_NAME         stm32f4discovery_simple)

# Clang suite
# Disabled due to issues with clang. See issue #191.
#add_suite(platform_bat
#        CASES               gpio_bat exti_manager_bat bypass_console_bat uart_bat
#        TOOLCHAIN_NAME      arm-cm4-clang.cmake
#        TARGET_NAME         stm32f4discovery_simple)

add_suite(platform_bat
        CASES               bypass_console_bat delay_bat
        TARGET_NAME         host)

add_suite(platform_bat
        CASES               bypass_console_bat systmr_bat delay_bat uart_bat
        TOOLCHAIN_NAME      arm-cm3-gnu-electron.cmake
        TARGET_NAME         particle_electron)

#-------------------------------------------------------------------------------
# Unity demo test suite

add_suite(unity_demo
        CASES               unity_demo
        TARGET_NAME         host)

add_suite(unity_demo
        CASES               unity_demo
        TOOLCHAIN_NAME      arm-cm4-gnu.cmake
        TARGET_NAME         stm32f4discovery_simple)

add_suite(unity_demo
        CASES               unity_demo
        TOOLCHAIN_NAME      arm-cm4-gnu.cmake
        TARGET_NAME         tivac_tm4)

add_suite(unity_demo
        CASES               unity_demo
        TOOLCHAIN_NAME      arm-cm3-gnu-electron.cmake
        TARGET_NAME         particle_electron)


#-------------------------------------------------------------------------------
# Concurrency tests

add_suite(concurrency_suite
        CASES               semaphore_test
        TOOLCHAIN_NAME      arm-cm4-gnu.cmake
        TARGET_NAME         stm32f4discovery_rtos)


#-------------------------------------------------------------------------------
# Generate suite list file
file(GENERATE OUTPUT ${SUITE_LIST_FILE}
        CONTENT "${SUITE_LIST}")
